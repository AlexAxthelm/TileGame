// Generated by Copilot
import { describe, it, expect } from 'vitest';
import { Grid } from '../models/Grid';
import { defaultGridConfig } from '../config/gridConfig';

describe('Grid', () => {
    it('should initialize with given dimensions', () => {
        const grid = new Grid(4, 5);
        const [width, height] = grid.dimensions;
        expect(width).toBe(4);
        expect(height).toBe(5);
    });

    it('should initialize with empty tiles', () => {
        const grid = new Grid(3, 3);
        expect(grid.tiles.length).toBe(3);
        expect(grid.tiles[0].length).toBe(3);
        expect(grid.tiles.every(row => row.every(tile => tile === null))).toBe(true);
    });

    it('should validate minimum dimensions', () => {
        expect(() => new Grid(defaultGridConfig.minWidth - 1, 4)).toThrow();
        expect(() => new Grid(4, defaultGridConfig.minHeight - 1)).toThrow();
    });

    it('should validate maximum dimensions', () => {
        expect(() => new Grid(defaultGridConfig.maxWidth + 1, 4)).toThrow();
        expect(() => new Grid(4, defaultGridConfig.maxHeight + 1)).toThrow();
    });

    it('should validate integer dimensions', () => {
        expect(() => new Grid(3.5, 4)).toThrow();
        expect(() => new Grid(4, 3.5)).toThrow();
    });

    it('should create an independent copy when cloned', () => {
        const original = new Grid(3, 3);
        const clone = original.clone();
        expect(clone.dimensions).toEqual(original.dimensions);
        expect(clone).not.toBe(original);
        expect(clone.tiles).not.toBe(original.tiles);
    });
});